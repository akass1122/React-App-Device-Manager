{"version":3,"sources":["components/SmallPage.js","components/MainPage.js","App.js","index.js"],"names":["SmallPage","_ref","topDevices","devices","columnName","clonedDevices","map","device","_objectSpread","size","Math","min","length","rowNum","sort","a","b","cpuPct","memBytes","networkTxBytes","networkRxBytes","slice","sortColumn","react_default","createElement","react","className","i","key","ip","owner","MainPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","postDevice","asyncToGenerator","regenerator_default","mark","_callee","config","wrap","_context","prev","next","headers","Content-Type","axios","post","sent","t0","console","log","stop","_x","apply","arguments","deleteDevice","_ref2","_callee2","idOfDeviceToDelete","_context2","_id","_x2","onChangeRow","event","chosenDeviceCopy","MainPage_objectSpread","state","defineProperty","target","name","value","devicesCopy","toConsumableArray","setState","onChangeNewDevice","updatedDevice","newDevice","updatedState","onSubmitRow","preventDefault","changedDevice","deviceToDB","onSubmitDeleteRow","deviceToDelete","splice","onSubmitNewDevice","deviceToAdd","push","getDevices","_callee3","res","_context3","get","data","getAndConvertDevices","_callee4","convertedDevices","_context4","toFixed","bind","assertThisInitialized","_this2","type","onChange","onSubmit","components_SmallPage","React","Component","App","components_MainPage","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.753fb2b4.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nconst SmallPage = ({\r\n  devices,\r\n  columnName\r\n}) => {\r\n  const clonedDevices = devices.map(device => ({ ...device }));\r\n  let topDevices;\r\n  // Sort a chosen column using a comparator\r\n  const sortColumn = (devices, columnName, rowNum) => {\r\n    switch (columnName) {\r\n      case \"CPU\":\r\n        //propertyName = \"cpuPct\";\r\n        devices.sort(function (a, b) {\r\n          return b.cpuPct - a.cpuPct;\r\n        });\r\n        break;\r\n      case \"Mem\":\r\n        //propertyName = \"memBytes\";\r\n        devices.sort(function (a, b) {\r\n          return b.memBytes - a.memBytes;\r\n        });\r\n        break;\r\n      case \"TX\":\r\n        //propertyName = \"networkTxBytes\";\r\n        devices.sort(function (a, b) {\r\n          return b.networkTxBytes - a.networkTxBytes;\r\n        });\r\n        break;\r\n      case \"RX\":\r\n        //propertyName = \"networkRxBytes\";\r\n        devices.sort(function (a, b) {\r\n          return b.networkRxBytes - a.networkRxBytes;\r\n        });\r\n        break;\r\n      default:\r\n    }\r\n    let tDevices = devices.slice(0, rowNum);\r\n    return tDevices;\r\n  }\r\n  let size = Math.min(devices.length, 5);\r\n  topDevices = sortColumn(clonedDevices, columnName, size);\r\n  //let topDevices1 = topDevices.map(device => ({ ip: device.ip, owner: device.owner, [propertyName]: device[propertyName] }));\r\n  return (\r\n    <Fragment>\r\n      <div>\r\n        <p className=\"title\"> Top 5 Devices in {columnName} </p>\r\n        <table className=\"table table-bordered table-condensed table-striped table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"col-md-2\">IP</th>\r\n              <th className=\"col-md-2\">Owner</th>\r\n              {/* Conditional rendering column */}\r\n              {columnName === \"CPU\" && (<th className=\"col-md-2\">CPU</th>)}\r\n              {columnName === \"Mem\" && (<th className=\"col-md-2\">Mem</th>)}\r\n              {columnName === \"TX\" && (<th className=\"col-md-2\">TX</th>)}\r\n              {columnName === \"RX\" && (<th className=\"col-md-2\">RX</th>)}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {topDevices.map((device, i) => (\r\n              <tr key={i}>\r\n                <td>{device.ip}</td>\r\n                <td>{device.owner}</td>\r\n                {/* Conditional rendering column */}\r\n                {columnName === \"CPU\" && (<td>{device.cpuPct}%</td>)}\r\n                {columnName === \"Mem\" && (< td > {device.memBytes} GB</td>)}\r\n                {columnName === \"TX\" && (<td>{device.networkTxBytes} MB</td>)}\r\n                {columnName === \"RX\" && (<td>{device.networkRxBytes} MB</td>)}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </Fragment >\r\n  );\r\n}\r\nexport default SmallPage;\r\n\r\n","import React from \"react\";\r\nimport SmallPage from \"./SmallPage\";\r\nimport axios from \"axios\";\r\n\r\nclass MainPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      devices: [],\r\n      newDevice: {\r\n        ip: \"\",\r\n        owner: \"\",\r\n        cpuPct: 0,\r\n        memBytes: 0,\r\n        networkTxBytes: 0,\r\n        networkRxBytes: 0\r\n      }\r\n    }\r\n    this.onChangeNewDevice = this.onChangeNewDevice.bind(this);\r\n    this.onSubmitNewDevice = this.onSubmitNewDevice.bind(this);\r\n\r\n    this.onSubmitDeleteRow = this.onSubmitDeleteRow.bind(this);\r\n    this.onChangeRow = this.onChangeRow.bind(this);\r\n    this.onSubmitRow = this.onSubmitRow.bind(this);\r\n  }\r\n\r\n  // This function postDevice make POST request to server \r\n  // to route  '/api/devices'     to update or add device\r\n  postDevice = async (device) => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      };\r\n      const res = await axios.post('/api/devices', device, config);\r\n      //console.log(res.data);\r\n    } catch (err) {\r\n      console.log(\"Error posting data\");\r\n    }\r\n  }\r\n  // Function deleteDevice send POST request to\r\n  // Server at route   '/api/devices/delete'\r\n  // We call axios POST because we need to send _id to server\r\n  // If we use axios DELETE method then we cannot send data to server\r\n  deleteDevice = async (idOfDeviceToDelete) => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      };\r\n      await axios.post('/api/devices/delete', { _id: idOfDeviceToDelete }, config);\r\n      console.log(\"idOfDeviceToDelete: \", idOfDeviceToDelete);\r\n    } catch (err) {\r\n      console.log(\"Error deleting\");\r\n    }\r\n\r\n  }\r\n\r\n  // used as a helper function for onChange in Main Table\r\n  onChangeRow = (event, i) => {\r\n    const chosenDeviceCopy = {\r\n      ...this.state.devices[i],\r\n      [event.target.name]: event.target.value\r\n    }\r\n    const devicesCopy = [...this.state.devices];\r\n    devicesCopy[i] = chosenDeviceCopy;// changed i-th device in array copy\r\n    this.setState({ ...this.state, devices: devicesCopy });\r\n  }\r\n  // onChange function in Add Table\r\n  onChangeNewDevice = (event) => {\r\n    const updatedDevice = {\r\n      ...this.state.newDevice,\r\n      [event.target.name]: event.target.value\r\n    }\r\n    const updatedState = {\r\n      ...this.state,\r\n      newDevice: updatedDevice\r\n    }\r\n    this.setState(updatedState);\r\n  }\r\n\r\n  // Helper function for onSubmit to submit a row in Main Table\r\n  onSubmitRow = (event, i) => {\r\n    event.preventDefault();\r\n    const changedDevice = this.state.devices[i]\r\n    const deviceToDB = { // copy change changedDevice and convert to Bytes\r\n      ...changedDevice,\r\n      memBytes: changedDevice.memBytes * 1024 * 1024 * 1024,\r\n      networkTxBytes: changedDevice.networkTxBytes * 1024 * 1024,\r\n      networkRxBytes: changedDevice.networkRxBytes * 1024 * 1024\r\n    }\r\n    this.postDevice(deviceToDB);  // Sends POST request to Server\r\n    //console.log(\"SubmitRow: \", deviceToDB);\r\n  }\r\n\r\n  // used as a helper function for onSubmit Delete Row in Main Table\r\n  onSubmitDeleteRow = (event, i) => {\r\n    event.preventDefault();\r\n    const deviceToDelete = this.state.devices[i]\r\n    this.deleteDevice(deviceToDelete._id);// call function deleteDevice with this device's id\r\n    let devicesCopy = this.state.devices.map(device => ({ ...device }));//deep copy of devices\r\n    devicesCopy.splice(i, 1); // delete i-th device\r\n    this.setState({ ...this.state, devices: devicesCopy });//update devices in state\r\n  }\r\n\r\n  onSubmitNewDevice = (event) => {\r\n    event.preventDefault();\r\n    const deviceToAdd = { //copy devices in state and convert to Bytes\r\n      ...this.state.newDevice,\r\n      memBytes: this.state.newDevice.memBytes * 1024 * 1024 * 1024,\r\n      networkTxBytes: this.state.newDevice.networkTxBytes * 1024 * 1024,\r\n      networkRxBytes: this.state.newDevice.networkRxBytes * 1024 * 1024\r\n    }\r\n\r\n    const devicesCopy = this.state.devices.map(device => ({ ...device }));//deep copy\r\n    devicesCopy.push(this.state.newDevice);// add newDevice to copy of devices\r\n    this.setState({ ...this.state, devices: devicesCopy });//update devices in state\r\n    const emptyDevice = {\r\n      ip: \"\",\r\n      owner: \"\",\r\n      cpuPct: 0,\r\n      memBytes: 0,\r\n      networkTxBytes: 0,\r\n      networkRxBytes: 0\r\n    };\r\n    this.setState({ newDevice: emptyDevice }, () => {// setState is asynchronous. This is callback\r\n      console.log(\"in Submit: Done setState this.state.newDevice: \", this.state.newDevice);\r\n      //this.forceUpdate();\r\n    });\r\n\r\n    this.postDevice(deviceToAdd); // Sends  POST request to Server\r\n    //console.log(\"deviceToAdd: \", deviceToAdd);\r\n  }\r\n  // This function makes GET request to server to \r\n  // route '/api/devices'  to get all devices\r\n  getDevices = async () => { //use if show in bytes\r\n    try {\r\n\r\n      const res = await axios.get('/api/devices');\r\n      // res.data contains array of all devices\r\n      this.setState({ devices: res.data }); // \r\n      //console.log(res.data);\r\n\r\n    } catch (err) {\r\n      console.log(\"Error getting data\");\r\n    }\r\n  };\r\n\r\n\r\n  // This function makes GET request to server to \r\n  // route '/api/devices'  to get all devices,\r\n  // then convert them to GB, MB before saving in state\r\n\r\n  getAndConvertDevices = // use if show in GB, MB\r\n    async () => {\r\n      try {\r\n\r\n        const res = await axios.get('/api/devices');\r\n        // res.data contains array of all devices\r\n        //Take from res.data and convert to GB, MB\r\n        const convertedDevices = res.data.map(device => ({\r\n          ...device,\r\n          memBytes: device.memBytes / (1024.0 * 1024 * 1024).toFixed(2),\r\n          networkTxBytes: device.networkTxBytes / (1024.0 * 1024).toFixed(2),\r\n          networkRxBytes: device.networkRxBytes / (1024.0 * 1024).toFixed(2)\r\n        }));\r\n\r\n        this.setState({ devices: convertedDevices });//set state with these devices\r\n        //console.log(res.data);\r\n      } catch (err) {\r\n        console.log(\"Error getting data\");\r\n      }\r\n    };\r\n\r\n  // This function is called before page rendering.\r\n  // It calls getAndConvertDevices which sends \r\n  // GET request to server to \r\n  // route   '/api/devices'  to get all devices,\r\n  // then convert them to GB, MB before saving in state\r\n  componentDidMount() {\r\n    //this.getDevices();   // use this line if no need to convert to GB, MB\r\n    this.getAndConvertDevices(); // Sends GET request to Server, then convert to GB, MB\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n        <p className=\"title\"> All Devices </p>\r\n\r\n        <table className=\"table table-bordered table-condensed table-striped table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"col-md-2\">IP</th>\r\n              <th className=\"col-md-2\">Owner</th>\r\n              <th className=\"col-md-2\">CPU in Percent</th>\r\n              <th className=\"col-md-2\">Mem in GB</th>\r\n              <th className=\"col-md-2\">TX in MB</th>\r\n              <th className=\"col-md-2\">RX in MB</th>\r\n              <th className=\"col-md-2\"></th>\r\n\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.devices.map((device, i) => (\r\n              <tr key={i} >\r\n                <td>\r\n                  <input type=\"text\" name=\"ip\" value={device.ip} size=\"20\" onChange={(event) => this.onChangeRow(event, i)} />\r\n                </td>\r\n                <td>\r\n                  <input type=\"text\" name=\"owner\" value={device.owner} onChange={(event) => this.onChangeRow(event, i)} />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" name=\"cpuPct\" value={device.cpuPct} size=\"3\" onChange={(event) => this.onChangeRow(event, i)} />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" name=\"memBytes\" value={device.memBytes} onChange={(event) => this.onChangeRow(event, i)} />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" name=\"networkTxBytes\" value={device.networkTxBytes} onChange={(event) => this.onChangeRow(event, i)} />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" name=\"networkRxBytes\" value={device.networkRxBytes} onChange={(event) => this.onChangeRow(event, i)} />\r\n                </td>\r\n                <td><form onSubmit={(event) => this.onSubmitRow(event, i)}><input type=\"submit\" value=\"Submit Row\" className='btn' /> </form></td>\r\n                <td><form onSubmit={(event) => this.onSubmitDeleteRow(event, i)}><input type=\"submit\" value=\"Delete Row\" className='btn' /> </form></td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <p className=\"top1rem\" />\r\n        <p className=\"title\"> Add Row </p>\r\n        <form onSubmit={this.onSubmitNewDevice}>\r\n          <table className=\"table table-bordered table-condensed table-striped table-hover\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"col-md-2\">IP</th>\r\n                <th className=\"col-md-2\">Owner</th>\r\n                <th className=\"col-md-2\">CPU in Percent</th>\r\n                <th className=\"col-md-2\">Mem in GB</th>\r\n                <th className=\"col-md-2\">TX in MB</th>\r\n                <th className=\"col-md-2\">RX in MB</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td><input type=\"text\" name=\"ip\" value={this.state.newDevice.ip} onChange={this.onChangeNewDevice} /></td>\r\n                <td><input type=\"text\" name=\"owner\" value={this.state.newDevice.owner} onChange={this.onChangeNewDevice} /></td>\r\n                <td><input type=\"number\" name=\"cpuPct\" value={this.state.newDevice.cpuPct} onChange={this.onChangeNewDevice} /></td>\r\n                <td><input type=\"number\" name=\"memBytes\" value={this.state.newDevice.memBytes} onChange={this.onChangeNewDevice} /></td>\r\n                <td><input type=\"number\" name=\"networkTxBytes\" value={this.state.newDevice.networkTxBytes} onChange={this.onChangeNewDevice} /></td>\r\n                <td><input type=\"number\" name=\"networkRxBytes\" value={this.state.newDevice.networkRxBytes} onChange={this.onChangeNewDevice} /></td>\r\n              </tr>\r\n\r\n            </tbody>\r\n          </table>\r\n          <input type=\"submit\" value=\"Submit Added Row to Server\" className='btn' />\r\n        </form>\r\n        <br />\r\n        <br />\r\n\r\n        <div className=\"panel-grid\">\r\n          <div className=\"panel-cpu\">\r\n            <SmallPage className=\"panel-grid\" devices={this.state.devices} columnName=\"CPU\" />\r\n          </div>\r\n          <div className=\"panel-mem\">\r\n            <SmallPage devices={this.state.devices} columnName=\"Mem\" />\r\n            <SmallPage devices={this.state.devices} columnName=\"TX\" />\r\n            <SmallPage devices={this.state.devices} columnName=\"RX\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default MainPage;","import React, { Fragment } from 'react';\r\nimport MainPage from './components/MainPage';\r\nimport './App.css';\r\nconst App = () => {\r\n  return (\r\n    <Fragment>\r\n      <MainPage />\r\n\r\n    </Fragment>\r\n  );\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}