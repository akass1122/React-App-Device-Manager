{"version":3,"sources":["helper.js","components/SmallPage.js","components/MainPage.js","App.js","index.js"],"names":["bytesToStr","bytes","sizes","isNaN","parseFloat","isFinite","i","parseInt","Math","floor","log","toFixed","pow","SmallPage","_ref","propertyName","devices","columnName","clonedDevices","map","a","Object","objectSpread","size","min","length","topDevices1","rowNum","sort","b","cpuPct","memBytes","networkTxBytes","networkRxBytes","slice","sortColumn","device","defineProperty","ip","owner","react_default","createElement","react","className","key","MainPage","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeName","event","id","deviceIndex","state","findIndex","_id","chosenDeviceCopy","target","value","devicesCopy","toConsumableArray","setState","index","onSubmitName","e","preventDefault","asyncToGenerator","regenerator_default","mark","_callee","changedDevice","config","res","wrap","_context","prev","next","headers","Content-Type","axios","post","sent","console","status","data","t0","stop","apply","arguments","postDevices","_this2","_ref2","_callee2","_context2","get","getDevices","_this3","onSubmit","type","name","defaultValue","onChange","components_SmallPage","React","Component","App","components_MainPage","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"mRAgBeA,EAhBI,SAAUC,GAC3B,IAAIC,EAAQ,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,MAC1C,GAAc,IAAVD,EACF,MAAO,IAET,GAAIE,MAAMC,WAAWH,MAAYI,SAASJ,GACxC,MAAO,IAGT,IAAIK,EAAIC,SAASC,KAAKC,MAAMD,KAAKE,IAAIT,GAASO,KAAKE,IAAI,QAEvD,OAAU,IAANJ,EACKL,EAAMU,QAAQ,GAAK,IAAMT,EAAM,IAE9BD,EAAQO,KAAKI,IAAI,KAAMN,IAAIK,QAAQ,GAAK,IAAMT,EAAMI,IC6DjDO,EAzEG,SAAAC,GAGZ,IAGAC,EALJC,EAEIF,EAFJE,QACAC,EACIH,EADJG,WAEMC,EAAgBF,EAAQG,IAAI,SAAAC,GAAC,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GAAUD,KAkCzCG,EAAOf,KAAKgB,IAAIR,EAAQS,OAAQ,GAEhCC,EAjCe,SAACV,EAASC,EAAYU,GACvC,OAAQV,GACN,IAAK,MACHF,EAAe,SACfC,EAAQY,KAAK,SAAUR,EAAGS,GACxB,OAAOA,EAAEC,OAASV,EAAEU,SAEtB,MACF,IAAK,MACHf,EAAe,WACfC,EAAQY,KAAK,SAAUR,EAAGS,GACxB,OAAOA,EAAEE,SAAWX,EAAEW,WAExB,MACF,IAAK,KACHhB,EAAe,iBACfC,EAAQY,KAAK,SAAUR,EAAGS,GACxB,OAAOA,EAAEG,eAAiBZ,EAAEY,iBAE9B,MACF,IAAK,KACHjB,EAAe,iBACfC,EAAQY,KAAK,SAAUR,EAAGS,GACxB,OAAOA,EAAEI,eAAiBb,EAAEa,iBAMlC,OADejB,EAAQkB,MAAM,EAAGP,GAIrBQ,CAAWjB,EAAeD,EAAYM,GACtBJ,IAAI,SAAAiB,GAAM,OAAAf,OAAAgB,EAAA,EAAAhB,CAAA,CAAOiB,GAAIF,EAAOE,GAAIC,MAAOH,EAAOG,OAAQxB,EAAeqB,EAAOrB,MACzG,OACEyB,EAAApB,EAAAqB,cAACC,EAAA,SAAD,KACEF,EAAApB,EAAAqB,cAAA,WACED,EAAApB,EAAAqB,cAAA,KAAGE,UAAU,SAAb,qBAAwC1B,EAAxC,KACAuB,EAAApB,EAAAqB,cAAA,SAAOE,UAAU,kEACfH,EAAApB,EAAAqB,cAAA,aACED,EAAApB,EAAAqB,cAAA,UACED,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,YAAd,MACAH,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,YAAd,SACgB,QAAf1B,GAAyBuB,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,YAAd,OACV,QAAf1B,GAAyBuB,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,YAAd,OACV,OAAf1B,GAAwBuB,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,YAAd,MACT,OAAf1B,GAAwBuB,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,YAAd,QAG7BH,EAAApB,EAAAqB,cAAA,aACGf,EAAYP,IAAI,SAACiB,EAAQ9B,GAAT,OACfkC,EAAApB,EAAAqB,cAAA,MAAIG,IAAKtC,GACPkC,EAAApB,EAAAqB,cAAA,UAAKL,EAAOE,IACZE,EAAApB,EAAAqB,cAAA,UAAKL,EAAOG,OACI,QAAftB,GAAyBuB,EAAApB,EAAAqB,cAAA,UAAKL,EAAON,OAAZ,KACV,QAAfb,GAAyBuB,EAAApB,EAAAqB,cAAA,cAAQzC,EAAWoC,EAAOL,WACpC,OAAfd,GAAwBuB,EAAApB,EAAAqB,cAAA,UAAKzC,EAAWoC,EAAOJ,iBAChC,OAAff,GAAwBuB,EAAApB,EAAAqB,cAAA,UAAKzC,EAAWoC,EAAOH,yCCuCjDY,cAnGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAA1B,OAAA2B,EAAA,EAAA3B,CAAA4B,KAAAJ,IACjBE,EAAA1B,OAAA6B,EAAA,EAAA7B,CAAA4B,KAAA5B,OAAA8B,EAAA,EAAA9B,CAAAwB,GAAAO,KAAAH,KAAMH,KAMRO,aAAe,SAACC,EAAOC,GACrB,IAAMC,EAAcT,EAAKU,MAAMzC,QAAQ0C,UAAU,SAAAtB,GAAY,OAAOA,EAAOuB,MAAQJ,IAC7EK,EAAgBvC,OAAAC,EAAA,EAAAD,CAAA,GAAQ0B,EAAKU,MAAMzC,QAAQwC,IACjDI,EAAiBrB,MAAQe,EAAMO,OAAOC,MACtC,IAAMC,EAAW1C,OAAA2C,EAAA,EAAA3C,CAAO0B,EAAKU,MAAMzC,SACnC+C,EAAYP,GAAeI,EAC3Bb,EAAKkB,SAAS,CAAEjD,QAAS+C,EAAaG,MAAOV,KAb5BT,EAenBoB,aAAe,SAAAC,GACbA,EAAEC,iBACe,eAAAvD,EAAAO,OAAAiD,EAAA,EAAAjD,CAAAkD,EAAAnD,EAAAoD,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAAnD,EAAAyD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAEVL,EAAgB3B,EAAKU,MAAMzC,QAAQ+B,EAAKU,MAAMS,OAC9CS,EAAS,CACbM,QAAS,CACPC,eAAgB,qBALJJ,EAAAE,KAAA,EAQEG,IAAMC,KAAK,eAAgBV,EAAeC,GAR5C,OAQVC,EARUE,EAAAO,KAShBC,QAAQ5E,IAAI,WAAYkE,EAAIW,QAC5BD,QAAQ5E,IAAIkE,EAAIY,MAVAV,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,SAYhBQ,QAAQ5E,IAAI,sBAZI,yBAAAoE,EAAAY,SAAAjB,EAAA,kBAAH,yBAAA3D,EAAA6E,MAAA1C,KAAA2C,YAAA,EAejBC,IA9BA9C,EAAKU,MAAQ,CACXzC,QAAS,GACTkD,MAAO,GAJQnB,oFAmCE,IAAA+C,EAAA7C,MACH,eAAA8C,EAAA1E,OAAAiD,EAAA,EAAAjD,CAAAkD,EAAAnD,EAAAoD,KAAG,SAAAwB,IAAA,IAAApB,EAAA,OAAAL,EAAAnD,EAAAyD,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cAAAiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAGGG,IAAMe,IAAI,gBAHb,OAGTtB,EAHSqB,EAAAZ,KAIfS,EAAK7B,SAAS,CAAEjD,QAAS4D,EAAIY,OACzBZ,EAAIY,KAAK/D,OAAS,IACpBqE,EAAKnC,IAAMiB,EAAIY,KAAK,GAAG7B,KANVsC,EAAAjB,KAAA,gBAAAiB,EAAAlB,KAAA,EAAAkB,EAAAR,GAAAQ,EAAA,SASfX,QAAQ5E,IAAI,sBATG,yBAAAuF,EAAAP,SAAAM,EAAA,iBAAH,yBAAAD,EAAAJ,MAAA1C,KAAA2C,aAAA,EAYhBO,oCAEO,IAAAC,EAAAnD,KACP,OACET,EAAApB,EAAAqB,cAAA,WACED,EAAApB,EAAAqB,cAAA,KAAGE,UAAU,SAAb,iBACAH,EAAApB,EAAAqB,cAAA,QAAM4D,SAAUpD,KAAKkB,cACnB3B,EAAApB,EAAAqB,cAAA,SAAOE,UAAU,kEACfH,EAAApB,EAAAqB,cAAA,aACED,EAAApB,EAAAqB,cAAA,UACED,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,YAAd,MACAH,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,YAAd,SACAH,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,YAAd,OACAH,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,YAAd,OACAH,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,YAAd,MACAH,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,YAAd,QAGJH,EAAApB,EAAAqB,cAAA,aACGQ,KAAKQ,MAAMzC,QAAQG,IAAI,SAACiB,EAAQ9B,GAAT,OACtBkC,EAAApB,EAAAqB,cAAA,MAAIG,IAAKtC,GACPkC,EAAApB,EAAAqB,cAAA,UAAKL,EAAOE,IACZE,EAAApB,EAAAqB,cAAA,UAAID,EAAApB,EAAAqB,cAAA,SAAO6D,KAAK,OAAOC,KAAK,SAASC,aAAcpE,EAAOG,MAAOkE,SAAU,SAACnD,GAAD,OAAW8C,EAAK/C,aAAaC,EAAOlB,EAAOuB,SACtHnB,EAAApB,EAAAqB,cAAA,UAAKL,EAAON,OAAZ,KACAU,EAAApB,EAAAqB,cAAA,UAAKzC,EAAWoC,EAAOL,WACvBS,EAAApB,EAAAqB,cAAA,UAAKzC,EAAWoC,EAAOJ,iBACvBQ,EAAApB,EAAAqB,cAAA,UAAKzC,EAAWoC,EAAOH,sBAK/BO,EAAApB,EAAAqB,cAAA,KAAGE,UAAU,YACbH,EAAApB,EAAAqB,cAAA,SAAO6D,KAAK,SAASxC,MAAM,+BAA+BnB,UAAU,SAEtEH,EAAApB,EAAAqB,cAAA,WACAD,EAAApB,EAAAqB,cAAA,WAEAD,EAAApB,EAAAqB,cAAA,OAAKE,UAAU,cACbH,EAAApB,EAAAqB,cAAA,OAAKE,UAAU,aACbH,EAAApB,EAAAqB,cAACiE,EAAD,CAAW/D,UAAU,aAAa3B,QAASiC,KAAKQ,MAAMzC,QAASC,WAAW,SAE5EuB,EAAApB,EAAAqB,cAAA,OAAKE,UAAU,aACbH,EAAApB,EAAAqB,cAACiE,EAAD,CAAW1F,QAASiC,KAAKQ,MAAMzC,QAASC,WAAW,QACnDuB,EAAApB,EAAAqB,cAACiE,EAAD,CAAW1F,QAASiC,KAAKQ,MAAMzC,QAASC,WAAW,OACnDuB,EAAApB,EAAAqB,cAACiE,EAAD,CAAW1F,QAASiC,KAAKQ,MAAMzC,QAASC,WAAW,iBA7FxC0F,IAAMC,WCGdC,SALH,WACV,OACErE,EAAApB,EAAAqB,cAACqE,EAAD,QCDJC,IAASC,OAAOxE,EAAApB,EAAAqB,cAACwE,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.b70fcfe8.chunk.js","sourcesContent":["const bytesToStr = function (bytes) {\r\n  var sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n  if (bytes === 0)\r\n    return '0';\r\n\r\n  if (isNaN(parseFloat(bytes)) || !isFinite(bytes))\r\n    return '-';\r\n\r\n  // find power of 2^10\r\n  var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n\r\n  if (i === 0)\r\n    return bytes.toFixed(2) + ' ' + sizes[0];\r\n  else\r\n    return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];\r\n}\r\nexport default bytesToStr;","import React, { Fragment } from \"react\";\r\nimport bytesToStr from \"../helper\";\r\nconst SmallPage = ({\r\n  devices,\r\n  columnName\r\n}) => {\r\n  const clonedDevices = devices.map(a => ({ ...a }));\r\n  let topDevices;\r\n  let propertyName;\r\n  const sortColumn = (devices, columnName, rowNum) => {\r\n    switch (columnName) {\r\n      case \"CPU\":\r\n        propertyName = \"cpuPct\";\r\n        devices.sort(function (a, b) {\r\n          return b.cpuPct - a.cpuPct;\r\n        });\r\n        break;\r\n      case \"Mem\":\r\n        propertyName = \"memBytes\";\r\n        devices.sort(function (a, b) {\r\n          return b.memBytes - a.memBytes;\r\n        });\r\n        break;\r\n      case \"TX\":\r\n        propertyName = \"networkTxBytes\";\r\n        devices.sort(function (a, b) {\r\n          return b.networkTxBytes - a.networkTxBytes;\r\n        });\r\n        break;\r\n      case \"RX\":\r\n        propertyName = \"networkRxBytes\";\r\n        devices.sort(function (a, b) {\r\n          return b.networkRxBytes - a.networkRxBytes;\r\n        });\r\n        break;\r\n      default:\r\n    }\r\n    let tDevices = devices.slice(0, rowNum);\r\n    return tDevices;\r\n  }\r\n  let size = Math.min(devices.length, 5);\r\n  topDevices = sortColumn(clonedDevices, columnName, size);\r\n  let topDevices1 = topDevices.map(device => ({ ip: device.ip, owner: device.owner, [propertyName]: device[propertyName] }));\r\n  return (\r\n    <Fragment>\r\n      <div>\r\n        <p className=\"title\"> Top 5 Devices in {columnName} </p>\r\n        <table className=\"table table-bordered table-condensed table-striped table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"col-md-2\">IP</th>\r\n              <th className=\"col-md-2\">Owner</th>\r\n              {columnName === \"CPU\" && (<th className=\"col-md-2\">CPU</th>)}\r\n              {columnName === \"Mem\" && (<th className=\"col-md-2\">Mem</th>)}\r\n              {columnName === \"TX\" && (<th className=\"col-md-2\">TX</th>)}\r\n              {columnName === \"RX\" && (<th className=\"col-md-2\">RX</th>)}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {topDevices1.map((device, i) => (\r\n              <tr key={i}>\r\n                <td>{device.ip}</td>\r\n                <td>{device.owner}</td>\r\n                {columnName === \"CPU\" && (<td>{device.cpuPct}%</td>)}\r\n                {columnName === \"Mem\" && (< td > {bytesToStr(device.memBytes)}</td>)}\r\n                {columnName === \"TX\" && (<td>{bytesToStr(device.networkTxBytes)}</td>)}\r\n                {columnName === \"RX\" && (<td>{bytesToStr(device.networkRxBytes)}</td>)}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </Fragment >\r\n  );\r\n}\r\nexport default SmallPage;\r\n\r\n","import React from \"react\";\r\nimport SmallPage from \"./SmallPage\";\r\nimport bytesToStr from \"../helper\";\r\nimport axios from \"axios\";\r\n\r\nclass MainPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      devices: [],\r\n      index: 0\r\n    }\r\n  }\r\n  onChangeName = (event, id) => {\r\n    const deviceIndex = this.state.devices.findIndex(device => { return device._id === id });\r\n    const chosenDeviceCopy = { ...this.state.devices[deviceIndex] }\r\n    chosenDeviceCopy.owner = event.target.value;\r\n    const devicesCopy = [...this.state.devices];\r\n    devicesCopy[deviceIndex] = chosenDeviceCopy; // a copy of array of devices with changed name\r\n    this.setState({ devices: devicesCopy, index: deviceIndex });\r\n  }\r\n  onSubmitName = e => {\r\n    e.preventDefault();\r\n    const postDevices = async () => {\r\n      try {\r\n        const changedDevice = this.state.devices[this.state.index]\r\n        const config = {\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        };\r\n        const res = await axios.post('/api/devices', changedDevice, config);\r\n        console.log('status: ', res.status);\r\n        console.log(res.data);\r\n      } catch (err) {\r\n        console.log(\"Error posting data\");\r\n      }\r\n    };\r\n    postDevices();\r\n  }\r\n\r\n  componentWillMount() {\r\n    const getDevices = async () => {\r\n      try {\r\n\r\n        const res = await axios.get('/api/devices');\r\n        this.setState({ devices: res.data });\r\n        if (res.data.length > 0) {\r\n          this._id = res.data[0]._id;\r\n        }\r\n      } catch (err) {\r\n        console.log(\"Error getting data\");\r\n      }\r\n    };\r\n    getDevices();\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p className=\"title\"> All Devices </p>\r\n        <form onSubmit={this.onSubmitName}>\r\n          <table className=\"table table-bordered table-condensed table-striped table-hover\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"col-md-2\">IP</th>\r\n                <th className=\"col-md-2\">Owner</th>\r\n                <th className=\"col-md-2\">CPU</th>\r\n                <th className=\"col-md-2\">Mem</th>\r\n                <th className=\"col-md-2\">TX</th>\r\n                <th className=\"col-md-2\">RX</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.devices.map((device, i) => (\r\n                <tr key={i}>\r\n                  <td>{device.ip}</td>\r\n                  <td><input type=\"text\" name=\"ownwer\" defaultValue={device.owner} onChange={(event) => this.onChangeName(event, device._id)} /></td>\r\n                  <td>{device.cpuPct}%</td>\r\n                  <td>{bytesToStr(device.memBytes)}</td>\r\n                  <td>{bytesToStr(device.networkTxBytes)}</td>\r\n                  <td>{bytesToStr(device.networkRxBytes)}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <p className=\"top1rem\" />\r\n          <input type=\"submit\" value=\"Submit Last Change to Server\" className='btn' />\r\n        </form>\r\n        <br />\r\n        <br />\r\n\r\n        <div className=\"panel-grid\">\r\n          <div className=\"panel-cpu\">\r\n            <SmallPage className=\"panel-grid\" devices={this.state.devices} columnName=\"CPU\" />\r\n          </div>\r\n          <div className=\"panel-mem\">\r\n            <SmallPage devices={this.state.devices} columnName=\"Mem\" />\r\n            <SmallPage devices={this.state.devices} columnName=\"TX\" />\r\n            <SmallPage devices={this.state.devices} columnName=\"RX\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default MainPage;","import React from 'react';\r\nimport MainPage from './components/MainPage';\r\nimport './App.css';\r\nconst App = () => {\r\n  return (\r\n    <MainPage />\r\n  );\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}